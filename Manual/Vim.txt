Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-05-01T22:01:56+08:00

====== Vim ======
Created 星期日 01 五月 2016

==== 0.其他 ====
man :
CTRL-] 跳转到当前光标所在单词对应的主题
CTRL-O 回到前一个位置

	全局：/etc/vimrc
	个人：~/.vimrc (默认不存在，需要自己创建)
(1) 行号：
	显示：set number，简写为：set nu
	取消显示：set nonumber，简写为：set nonu
(2) 括号匹配：
	匹配：set showmatch，简写为：set sm
	取消匹配：set nosm
(3) 自动缩进：
	开启：set ai
	禁用：set noai
(4) 高亮搜索
	开启：set hlsearch
	禁用：set nohlsearch
(5) 语法高亮
	开启：syntax on
	禁用：syntax off
(6) 忽略字符大小写
	启用：set ic
	禁用：set noic
:set ignorecase
:set noignorecase
:set ruler　在Vim窗口的右下角显示当前光标位置
:set hlsearch 高亮显示所有符合的匹配
:set nohlsearch
	:nohlsearch临时去掉当前的高亮显示
:set incsearch　键入目标字符串的过程中Vim就同时开始了搜索工作
:set wrapscan 搜索在达到文件的头尾时都会绕向另一个方向继续进行
:set nowrapscan


==== 1.插件 ====

=== 1.Tagbar ===
f5 Tagbar
zc zo 折叠
c-h/j/k/l 窗口转换
c-ww窗口转换

=== 2. Ctags ===
	http://easwy.com/blog/archives/exuberant-ctags-chinese-manual/%E3%80%80 (ctags中文翻译手册,Linux默认的Exuberant Ctags)
	ctags --list-languages 完整的程序语言支持列表
	ctags --list-kinds 为不同语言产生的标签的的类型


==== 3.Ctrlp ====
	http://kien.github.io/ctrlp.vim/%E3%80%80 (快速使用)
	http://blog.codepiano.com/pages/ctrlp-cn.light.html (ctrlp中文翻译)


==== 2.命令 ====
xp：交换光标所在处的字符及其后面字符的位置；
nx ：删除n个字符
cc：删除并输入新内容
ncc：一次删除n行
nu：撤销指定次数的操作
c-r:撤销此前的撤销
?PATTERN：从当前光标所在处向文件首部查找
:wall 保存所有
:qall 退出所有

撤销：
u在当前分支上前溯
g-/+ 在两个分支上前溯
c-r 在当前分支返回到最新修改处
:undo 或:undo n 撤销一次或n次
（撤销不被编号，只有修改才被编号）
:undolist 显示撤销树的分支
:earlier 10s/m/h 回到10秒／分／时

３fy Fy ; , ty Ty  找到右面第三个y　;左面;重复;相反重复;跳到右面y前一个字符处；左面；
c-g 在底部状态栏显示总行数以及当前百分比

**需要加/转义的字符:**
**.*[]^%/?~$\**
(#"',-=_+()&@!<>{}不用哦(?)）

* = /\<xxx\> 向后搜索光标处单词xxx
 # = ?\<xxx\> 同上，向前
g* = /xxx
g# =?xxx 

D 删除自当前光标至行尾的内容("d$"的快捷命令)
dw 删除自当前光标至下一个word的开头
db 删除自当前光标至前一个word的开始
diw 删除当前光标所在的word(不包括空白字符)
daw 删除当前光标所在的word(包括空白字符)

"*yy vi专有粘贴板
"+yy　系统公用粘贴板
		vim共有9类寄存器：
		无名（unnamed）寄存器：""，缓存最后一次操作内容；
		数字（numbered）寄存器："0 - "9，缓存最近操作内容，复制与删除有别；
		行内删除（small delete）寄存器："-，缓存行内删除内容；
		具名（named）寄存器："a - "z或"A - "Z，指定时可用；
		只读（read-only）寄存器：":, "., "%, "#，分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名；
		表达式（expression）寄存器："=，只读，用于执行表达式命令；
		选择及拖拽（selection and drop）寄存器："*, "+, "~，存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；
		黑洞（black hole）寄存器："_，不缓存操作内容（干净删除）；
		模式寄存器（last search pattern）："/，缓存最近的搜索模式。

强制指定文件格式
	:edit ++ff=unix file.txt　
		"++"字符串告诉Vim后面紧接着的是一个选项名,对该选项的设置
		将覆盖它的默认值。"++ff"代表的选项是'fileformat'.
		你也可以指定
		为"++ff=mac"或"++ff=dos"。
		（不 过 并 不 是 每 个 选 项 都 有 这 种 用 法 , 目 前 来 说 只
		有"++ff"和"++enc"可 以 这 样 用 。 当 然 也 可 以 用 这 两 个 选 项 的 全
		称"++fileformat"和"++encoding"。）
:%!xxd　　用"xxd"程序来做转换，以１６进制查看２进制文件(Vim将之视为普通文本。改变
		其十六进制不会引起右边对应字符的改变,反之也一样)
:%!xxd -r 编辑完成后再做一次逆向转换
gv 再次选择同一文本对象
c-a c-x 对选中数字加１或减１
	默认Vim将"007"视为一个八进制的数（:set nrformats-=octal　不让此类数字被看作
	是8进制的）
:argdo　对所有的文件执行操作，以另一个命令为参数。该命令将对所有待编辑的文件都
	执行一次。
	:argdo %s/\<x_cnt\>/x_counter/ge | update　(　"%s"替换操作将施于所有行上。替换操作的标志"g"使得每行中的全部"x cnt"都被替换。标志"e"则用 于 避 免 某 些 文 件 中 一 个"x cnt"都 找 不 到 时 的 错 误 消 息 。 否 则 的
	话":argdo"命令遇到这些错误就会终止整个操作。"update"命令会在文件有改变时进行保存。如果没有一个"x cnt"被替换为"x counter"那就不进行任何操作。)
:windo　对 所 有 窗 口 都 执 行 同 样 的 操作。
:bufdo　对所有的缓冲区执行操作

如果你只想对搜索模式的一部分应用大小写不敏感的策略,可以在它
前面加上一个"\c"。使用"\C"会使大小写敏感。而且这两个前辍的优先级
高 于'ignorecase'和'smartcase'选 项 的 设 定 , 使 用"\c"或"\C"时Vim不
会考虑这两个选项的值是什么。

:set nowrapscan 关闭越过文件头尾的循环搜索
/default/2 搜索模式"default",找到后将光标停留在目标行向下的第2行(偏移可以是正的也可以是负的,-2)
	/const/e　把光标置于目标字符串的最后一个字符
	/const/e+1　将光标置于目标字符串的结尾处的下一个字符
	/const/e-1
	/const/b+2 标字符串的开头右偏移2字符
* \+ \= \{n,m} \{-n,m}(懒惰模式) \{-}(懒惰模式)
/forever\&... 将 只 会 匹 配"forever"中 的"for"(&后的...)。 但 不 会 匹 配 到"fortuin"中的"for"
/forever\&../b+3则光标将停留在字母for后的第三个字符e上
	特殊项 		匹配什么 		等价的正则表达式
	\d 数字 [0-9] 
	\D 非数字 [^0-9] 
	\x 十六进制数 [0-9a-fA-F] 
	\X 非十六进制数 [^0-9a-fA-F] 
	\s 空白字符 [ ] (<Tab> 和<Space>)
	\S 非空白字符 [^ ] (除 <Tab> 和 <Space>之外)
	\l 小写字母 [a-z] 
	\L 非小写字母 [^a-z] 
	\u 大写字母 [A-Z] 
	\U 非大写字母 [^A-Z]
	\a 字母字符 [a-zA-Z]   /\a = /[a-zA-Z]
	\e <Esc>
	\t <Tab>
	\r <CR>
	\b <BS>
	\i 标识符字符 'isident'
	\I 同于\i,但排除了数字 
	\k 关键字字符  'iskeyword'
	\K 同\k,但排除数字 
	\p 可打印字符 'isprint'
	\P 同\p,但排除数字 
	\f 文件名字符 'isfname' (实际上Unix系统的文件名可以是任何除'0'和'/'之外的字
	符,前者用于标记一个字符串的结束,后者用来分隔一个路径中不同的
	部分)
	\F 同\f,但排除数字 
	\_s 匹配空格或断行
		\s 匹配空格
	\_s\+ 多个的空白(空格或断行)字符
	\n 匹配断行
		其 它 的 项 都 可 以 通 过 前 辍 以"\_"来 同 时 包 括 断 行:
			"\_."可以匹配包括断行在内的任何字符
			"\_.*"匹配到行尾的所有东西
			"\_[]",它同样可以让一个字符类集额外地包含一个断行 ＝\[\n]
			"\_a"匹配一个字母字符或一个断行
键入 ":help word",接着键入 CTRL-D 可以看到匹配 "word" 的
帮助主题。(=":helpgrep word")
qa 录制宏
	qA 追加宏
	修改宏:
		用o（小写）新加一行，不要编辑，用ESC退出到普通模式
		使用命令"ap会看到寄存器a中的命令宏像文本一样出现在这一行，然后编辑这一行。编辑的时候与vim编辑其他的文件一样。编辑结束后用0（零）回到行首。
		用"ay$将正确内容写到寄存器a中，最后删除这一行
有些命令在不指定范围的时候作用于整个文件。要让它只作用于当前行可以用当前行范围，标识 "."。":write" 命令就是这样: 不指定范围的时候,它写入整个文件,如果要仅写入当前行,可以这样:
	:.write otherfile
修改当前行到文件末的全部内容　:.,$s/yes/no/
"%" 就是 "1,$" 的缩写形式,表示从文件首到文件末
:?^Chapter?,/^Chapter/s=grey=gray=g　在 范 围 中 使 用 模 式，"?pattern?" 用于向前查找。同样,"/^Chapter/" 用于向后查找
:.+3,$-5　指定当前行下面第三行到文件末倒数第五行的范围
:’t,’b　　	　　用 "mt" 标记开头,再用"mb" 标记结尾。然后你就可以用标记表示一个范围 (包括标记的那一行)
:’>,$	　表示从选中部分的结尾到文件末，’< 和 ’> 实际上是标记,分别标识可视模式的开始和结尾

可视文本块：
0.1.CTRL-V 命令可以选中一个矩形文本块，"A" 命令的效果与 "I" 命令一样,只是把文字插入可视列块的右边,而且在空行(不包括全是空格和Tab)中会插入文字("I"不会插入)。注意："$" 命令和移动命令选取块在插入文字效果上不同。
0.2.c和C的区别
0.3.~交换大小写；U转换成大写;u转换成小写;>向右移动一个 "平移单位",中间用空白填充;<向左移动一个 "平移单位"(但能移动的距离是有限的,因为它左边的不是空白字符的字符会挡住它,这时它移到尽头就不再移动);r取代;

:read file
:$r file
:0read file
:.,$write temfile
:.,$write! temfile (!强制)
:.write file
:.write >>file (>>追加)

:[range]g[lobal]/{pattern}/[cmd]

要让一个操作符作用于当前行,可以执行这个操作符两次。例如,"d" 是删除操作符,所以删除一行就是 "dd"。相似地,"gugu" 使整一行变成小写。这可以缩成 "guu"。"gUgU" 可以缩成 "gUU" 而 "g~g~" 则是 "g~~"

c-p 　与tab 反向
c-d 　tab时多个选项总览
　* # 查找光标下完整匹配单词
　g* g# 查找光标下完整匹配单词和部分匹配
让粘贴的时候不替换寄存器内容
	xnoremap p pgvy
	


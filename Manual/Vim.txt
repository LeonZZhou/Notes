Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-05-01T22:01:56+08:00

====== Vim ======
Created 星期日 01 五月 2016

==== 0.其他 ====
man :
CTRL-] 跳转到当前光标所在单词对应的主题
CTRL-O 回到前一个位置

	全局：/etc/vimrc
	个人：~/.vimrc (默认不存在，需要自己创建)
(1) 行号：
	显示：set number，简写为：set nu
	取消显示：set nonumber，简写为：set nonu
(2) 括号匹配：
	匹配：set showmatch，简写为：set sm
	取消匹配：set nosm
(3) 自动缩进：
	开启：set ai
	禁用：set noai
(4) 高亮搜索
	开启：set hlsearch
	禁用：set nohlsearch
(5) 语法高亮
	开启：syntax on
	禁用：syntax off
(6) 忽略字符大小写
	启用：set ic
	禁用：set noic
:set ignorecase
:set noignorecase
:set ruler　在Vim窗口的右下角显示当前光标位置
:set hlsearch 高亮显示所有符合的匹配
:set nohlsearch
	:nohlsearch临时去掉当前的高亮显示
:set incsearch　键入目标字符串的过程中Vim就同时开始了搜索工作
:set wrapscan 搜索在达到文件的头尾时都会绕向另一个方向继续进行
:set nowrapscan


==== 1.插件 ====

=== 1.Tagbar (requires exuberant-ctags ) ===
f5 Tagbar
zc zo /  o 折叠
c-h/j/k/l 窗口转换
c-ww窗口转换
	<Leader>tt
	CTRL-]  (while the cursor is on a keyword (such as a function name) to jump to its definition.)
	Ctrl-T (to jump back up one level)


=== 2. Ctags ===
	http://easwy.com/blog/archives/exuberant-ctags-chinese-manual/　 (ctags中文翻译手册,Linux默认的Exuberant Ctags)
	ctags --list-languages 完整的程序语言支持列表
	ctags --list-kinds 为不同语言产生的标签的的类型


=== 3.Ctrlp ===
	ctrlp是一款相当棒的插件，主要的功能是对文件进行模糊的查找，如果你的project目录结构复杂，或者你正在阅读一个较大的项目的话，那么ctrlp可以帮你快速的定位到你想要文件而不必在终端不断的cd、ls。
	http://kien.github.io/ctrlp.vim/　 (快速使用)
	http://blog.codepiano.com/pages/ctrlp-cn.light.html (ctrlp中文翻译)
	<c-p>


=== 4.Neocomplete ===
	https://github.com/Shougo/neocomplete.vim


=== 5.numbers.vim ===
	https://github.com/myusuf3/numbers.vim
	:NumberToogle
	:NumberOnOff
	

=== 6.WinManager ===
	我们上面介绍了用于文件浏览的nerdtree以及浏览程序符号的taglist，这两个插件都会以窗口的形式出现在Vim的窗口中，那么如何合理的安排它们，这就是winmanager的作用


=== 7.NERDTree ===
	NERDTree是一个用于浏览文件系统的树形资源管理外挂,它可以让你像使用Windows档案总管一样在VIM中浏览文件系统并且打开文件或目录。
	<Leader>e
	<C-E> to toggle NERDTree


=== 8.Taglist ===

=== 9.Gundo ===
	Gundo提供了一个树状图形的撤消列表，下方还有每次修改的差异对比，分支一目了然，相当于一个面向撤消与编辑操作的版本控制工具。有了它，你的文件编辑就像是有了一台时光机，可以随心所欲的回到任何时间
	nnoremap <Leader>u :GundoToggle<CR>


=== 10.Sessionman ===
	这是VIM的Session Manager，作用很简单，管理VIM的会话，可以让你在重新打开VIM之后立刻进行之前的编辑状态，就像Windows的休眠一样，相信它一定是你工作的好伴侣。 
		 set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
		 nmap <leader>sl :SessionList<CR>
		 nmap <leader>ss :SessionSave<CR>
		 nmap <leader>sc :SessionClose<CR>


=== 11.Tabularize ===
	对齐
			<Leader>a= :Tabularize [[/=<CR>]]   "按=号对齐
			<Leader>a: :Tabularize [[/:<CR>]]	"按：号对齐
			<Leader>a:: :Tabularize /:\zs<CR>
			<Leader>a, :Tabularize /,<CR>
			<Leader>a<Bar> :Tabularize /<Bar><CR>
12.auto-pairs
	https://github.com/jiangmiao/auto-pairs
	Insert or delete brackets, parens, quotes in pair.
13.conflict-marker.vim
	https://github.com/rhysd/conflict-marker.vim
	conflict-marker.vim is Vim plugin for developers fighting against conflicts.
	conflict-marker.vim does:
	
		highlight conflict markers.
		jump among conflict markers.
		jump within conflict block; beginning, separator and end of the block.
		resolve conflict with various strategies; themselves, ourselves, none and both strategies.
14.ctrlp-funky
	https://github.com/tacahiroy/ctrlp-funky
	A super simple function navigator for ctrlp.vim.
	 It simply navigates and jumps to function definitions from the current file without ctags. It just searches function definitions or equivalent lines using regular expressions, therefore some languages' abstraction aren't accurate because of hard to parse.
15.

==== 2.命令 ====
xp：交换光标所在处的字符及其后面字符的位置；
nx ：删除n个字符
cc：删除并输入新内容
ncc：一次删除n行
nu：撤销指定次数的操作
c-r:撤销此前的撤销
?PATTERN：从当前光标所在处向文件首部查找
:wall 保存所有
:qall 退出所有

撤销：
u在当前分支上前溯
g-/+ 在两个分支上前溯
c-r 在当前分支返回到最新修改处
:undo 或:undo n 撤销一次或n次
（撤销不被编号，只有修改才被编号）
:undolist 显示撤销树的分支
:earlier 10s/m/h 回到10秒／分／时

３fy Fy ; , ty Ty  找到右面第三个y　;左面;重复;相反重复;跳到右面y前一个字符处；左面；
c-g 在底部状态栏显示总行数以及当前百分比

**需要加/转义的字符:**
**.*[]^%/?~$\**
(#"',-=_+()&@!<>{}不用哦(?)）

* = /\<xxx\> 向后搜索光标处单词xxx
 # = ?\<xxx\> 同上，向前
g* = /xxx
g# =?xxx 

D 删除自当前光标至行尾的内容("d$"的快捷命令)
dw 删除自当前光标至下一个word的开头
db 删除自当前光标至前一个word的开始
diw 删除当前光标所在的word(不包括空白字符)
daw 删除当前光标所在的word(包括空白字符)

"*yy vi专有粘贴板
"+yy　系统公用粘贴板
:[range]yank + 	copy the text specified by [range] into the system clipboard
:put + 	                       puts contents of system clipboard on a new line
 set clipboard=unnamedplus　　　系统粘贴板	
		vim共有9类寄存器：
		无名（unnamed）寄存器：""，缓存最后一次操作内容；
		数字（numbered）寄存器："0 - "9，缓存最近操作内容，复制与删除有别；
		行内删除（small delete）寄存器："-，缓存行内删除内容；
		具名（named）寄存器："a - "z或"A - "Z，指定时可用；
		只读（read-only）寄存器：":, "., "%, "#，分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名；
		表达式（expression）寄存器："=，只读，用于执行表达式命令；
		选择及拖拽（selection and drop）寄存器："*, "+, "~，存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；
		黑洞（black hole）寄存器："_，不缓存操作内容（干净删除）；
		模式寄存器（last search pattern）："/，缓存最近的搜索模式。

强制指定文件格式
	:edit ++ff=unix file.txt　
		"++"字符串告诉Vim后面紧接着的是一个选项名,对该选项的设置
		将覆盖它的默认值。"++ff"代表的选项是'fileformat'.
		你也可以指定
		为"++ff=mac"或"++ff=dos"。
		（不 过 并 不 是 每 个 选 项 都 有 这 种 用 法 , 目 前 来 说 只
		有"++ff"和"++enc"可 以 这 样 用 。 当 然 也 可 以 用 这 两 个 选 项 的 全
		称"++fileformat"和"++encoding"。）
:%!xxd　　用"xxd"程序来做转换，以１６进制查看２进制文件(Vim将之视为普通文本。改变
		其十六进制不会引起右边对应字符的改变,反之也一样)
:%!xxd -r 编辑完成后再做一次逆向转换
gv 再次选择同一文本对象
c-a c-x 对选中数字加１或减１
	默认Vim将"007"视为一个八进制的数（:set nrformats-=octal　不让此类数字被看作
	是8进制的）
:argdo　对所有的文件执行操作，以另一个命令为参数。该命令将对所有待编辑的文件都
	执行一次。
	:argdo %s/\<x_cnt\>/x_counter/ge | update　(　"%s"替换操作将施于所有行上。替换操作的标志"g"使得每行中的全部"x cnt"都被替换。标志"e"则用 于 避 免 某 些 文 件 中 一 个"x cnt"都 找 不 到 时 的 错 误 消 息 。 否 则 的
	话":argdo"命令遇到这些错误就会终止整个操作。"update"命令会在文件有改变时进行保存。如果没有一个"x cnt"被替换为"x counter"那就不进行任何操作。)
:windo　对 所 有 窗 口 都 执 行 同 样 的 操作。
:bufdo　对所有的缓冲区执行操作

如果你只想对搜索模式的一部分应用大小写不敏感的策略,可以在它
前面加上一个"\c"。使用"\C"会使大小写敏感。而且这两个前辍的优先级
高 于'ignorecase'和'smartcase'选 项 的 设 定 , 使 用"\c"或"\C"时Vim不
会考虑这两个选项的值是什么。

:set nowrapscan 关闭越过文件头尾的循环搜索
/default/2 搜索模式"default",找到后将光标停留在目标行向下的第2行(偏移可以是正的也可以是负的,-2)
	/const/e　把光标置于目标字符串的最后一个字符
	/const/e+1　将光标置于目标字符串的结尾处的下一个字符
	/const/e-1
	/const/b+2 标字符串的开头右偏移2字符
* \+ \= \{n,m} \{-n,m}(懒惰模式) \{-}(懒惰模式)
/forever\&... 将 只 会 匹 配"forever"中 的"for"(&后的...)。 但 不 会 匹 配 到"fortuin"中的"for"
/forever\&../b+3则光标将停留在字母for后的第三个字符e上
	特殊项 		匹配什么 		等价的正则表达式
	\d 数字 [0-9] 
	\D 非数字 [^0-9] 
	\x 十六进制数 [0-9a-fA-F] 
	\X 非十六进制数 [^0-9a-fA-F] 
	\s 空白字符 [ ] (<Tab> 和<Space>)
	\S 非空白字符 [^ ] (除 <Tab> 和 <Space>之外)
	\l 小写字母 [a-z] 
	\L 非小写字母 [^a-z] 
	\u 大写字母 [A-Z] 
	\U 非大写字母 [^A-Z]
	\a 字母字符 [a-zA-Z]   /\a = /[a-zA-Z]
	\e <Esc>
	\t <Tab>
	\r <CR>
	\b <BS>
	\i 标识符字符 'isident'
	\I 同于\i,但排除了数字 
	\k 关键字字符  'iskeyword'
	\K 同\k,但排除数字 
	\p 可打印字符 'isprint'
	\P 同\p,但排除数字 
	\f 文件名字符 'isfname' (实际上Unix系统的文件名可以是任何除'0'和'/'之外的字
	符,前者用于标记一个字符串的结束,后者用来分隔一个路径中不同的
	部分)
	\F 同\f,但排除数字 
	\_s 匹配空格或断行
		\s 匹配空格
	\_s\+ 多个的空白(空格或断行)字符
	\n 匹配断行
		其 它 的 项 都 可 以 通 过 前 辍 以"\_"来 同 时 包 括 断 行:
			"\_."可以匹配包括断行在内的任何字符
			"\_.*"匹配到行尾的所有东西
			"\_[]",它同样可以让一个字符类集额外地包含一个断行 ＝\[\n]
			"\_a"匹配一个字母字符或一个断行
键入 ":help word",接着键入 CTRL-D 可以看到匹配 "word" 的
帮助主题。(=":helpgrep word")
qa 录制宏
	qA 追加宏
	修改宏:
		用o（小写）新加一行，不要编辑，用ESC退出到普通模式
		使用命令"ap会看到寄存器a中的命令宏像文本一样出现在这一行，然后编辑这一行。编辑的时候与vim编辑其他的文件一样。编辑结束后用0（零）回到行首。
		用"ay$将正确内容写到寄存器a中，最后删除这一行
有些命令在不指定范围的时候作用于整个文件。要让它只作用于当前行可以用当前行范围，标识 "."。":write" 命令就是这样: 不指定范围的时候,它写入整个文件,如果要仅写入当前行,可以这样:
	:.write otherfile
修改当前行到文件末的全部内容　:.,$s/yes/no/
"%" 就是 "1,$" 的缩写形式,表示从文件首到文件末
:?^Chapter?,/^Chapter/s=grey=gray=g　在 范 围 中 使 用 模 式，"?pattern?" 用于向前查找。同样,"/^Chapter/" 用于向后查找
:.+3,$-5　指定当前行下面第三行到文件末倒数第五行的范围
:’t,’b　　	　　用 "mt" 标记开头,再用"mb" 标记结尾。然后你就可以用标记表示一个范围 (包括标记的那一行)
:’>,$	　表示从选中部分的结尾到文件末，’< 和 ’> 实际上是标记,分别标识可视模式的开始和结尾

可视文本块：
0.1.CTRL-V 命令可以选中一个矩形文本块，"A" 命令的效果与 "I" 命令一样,只是把文字插入可视列块的右边,而且在空行(不包括全是空格和Tab)中会插入文字("I"不会插入)。注意："$" 命令和移动命令选取块在插入文字效果上不同。
0.2.c和C的区别
0.3.~交换大小写；U转换成大写;u转换成小写;>向右移动一个 "平移单位",中间用空白填充;<向左移动一个 "平移单位"(但能移动的距离是有限的,因为它左边的不是空白字符的字符会挡住它,这时它移到尽头就不再移动);r取代;

:read file
:$r file
:0read file
:.,$write temfile
:.,$write! temfile (!强制)
:.write file
:.write >>file (>>追加)

:[range]g[lobal]/{pattern}/[cmd]

要让一个操作符作用于当前行,可以执行这个操作符两次。例如,"d" 是删除操作符,所以删除一行就是 "dd"。相似地,"gugu" 使整一行变成小写。这可以缩成 "guu"。"gUgU" 可以缩成 "gUU" 而 "g~g~" 则是 "g~~"

c-p 　与tab 反向
c-d 　tab时多个选项总览
　* # 查找光标下完整匹配单词
　g* g# 查找光标下完整匹配单词和部分匹配
让粘贴的时候不替换寄存器内容
	xnoremap p pgvy
	
<C-r>+/-   放大缩小

==== 3.spf13命令 ====
	ctrl+:  显示5条系统复制（deepin-terminal 中可以）
	

==== 4.EX命令(:) ====
		标签 		字符		 		动作
		|:!|		 :!!			 过滤行,或可通过外部命令执行之
		|:!!|		 :#			 重复上次的 ":!" 命令
		|:#|		 :&			 等同于 ":number"
		|:&|		 :*			 重复上次的 ":substitute"
		|:star|		 :<			 执行寄存器的内容
		|:<|		 :=			 将行左移一个 ’shiftwidth’
		|:=|		 :>			 显示光标所在的行号
		|:>|		 :@			 将行右移一个 ’shiftwidth’
		|:@|		 :@@			 执行寄存器的内容
		|:@@|		 :N[ext]			 重复上次的 ":@"
		|:Next|		 :P[rint]			 转到参数列表的上一个文件
		|:Print|		 :X			 显示行
		|:X|		 :a[ppend]			 请求加密密钥
		|:append|		 :ab[breviate]			 附加文本
		|:abbreviate|		 :abc[lear]			 输入缩写
		|:abclear|		 :abo[veleft]			 删除所有的缩写
		|:aboveleft|		 :al[l]			 使得分割的窗口出现在左侧或者上方
		|:all|		 :am[enu]			 为参数列表的每个文件打开一个窗口
		|:amenu|		 :an[oremenu]			 为所有模式输入菜单项
		|:anoremenu|		 :ar[gs]			 为所有模式输入菜单项,不会被重新映射
		|:args|		 :arga[dd]			 显示参数列表
		|:argadd|		 :argd[elete]			 增加项目到参数列表中
		|:argdelete|		 :arge[dit]			 从参数列表中删除项目
		|:argedit|		 :argdo			 增加项目到参数列表中并编辑之
		|:argdo|		 :argg[lobal]			 在参数列表上的所有项目上执行一个命令
		|:argglobal|		 :argl[ocal]			 定义全局参数列表
		|:arglocal|		 :argu[ment]			 定义本地参数列表
		|:argument|		 :as[cii]			 转到参数列表一个指定的文件
		|:ascii|		 :au[tocmd]			 显示光标所在的字符的 ascii 值
		|:autocmd|		 :aug[roup]			 输入或者显示自动命令
		|:augroup|		 :aun[menu]			 选择要用的自动命令组
		|:aunmenu|		 :b[uffer]			 删除所有模式下的菜单
		|:buffer|		 :bN[ext]			 转到缓冲区列表里的特定缓冲区
		|:bNext|		 :!			 转到缓冲区列表里的上一个缓冲区
		|:ball|		 :ba[ll]			 为缓冲区列表里的每个缓冲区打开一个窗口
		|:badd|		 :bad[d]			 增加缓冲区到缓冲区列表
		|:bdelete|		 :bd[elete]			 从缓冲区列表删除缓冲区
		|:behave|		 :be[have]			 设置鼠标和选择行为
		|:belowright|		 :bel[owright]			 使得分割的窗口出现在右侧或者下方
		|:bfirst|		 :bf[irst]			 转到缓冲区列表里的第一个缓冲区
		|:blast|		 :bl[ast]			 转到缓冲区列表里的最后一个缓冲区
		|:bmodified|		 :bm[odified]			 转到缓冲区列表里的下一个修改过的缓冲区
		|:bnext|		 :bn[ext]			 转到缓冲区列表里的下一个缓冲区
		|:botright|		 :bo[tright]			 使得分割的窗口出现在最右侧或者下方
		|:bprevious|		 :bp[revious]			 转到缓冲区列表里的上一个缓冲区
		|:brewind|		 :br[ewind]			 转到缓冲区列表里的第一个缓冲区
		|:break|		 :brea[k]			 跳出 while 循环
		|:breakadd|		 :breaka[dd]			 增加调试器断点
		|:breakdel|		 :breakd[el]			 删除调试器断点
		|:breaklist|		 :breakl[ist]			 列出调试器断点
		|:browse|		 :bro[wse]			 使用文件选择对话框
		|:bufdo|		 :bufdo			 为所有列表内缓冲区执行命令
		|:buffers|		 :buffers			 列出缓冲区列表里的所有文件
		|:bunload|		 :bun[load]			 卸载指定的缓冲区
		|:bwipeout|		 :bw[ipeout]			 真正删除一个缓冲区
		|:change|		 :c[hange]			 替换一行或若干行
		|:cNext|		 :cN[ext]			 跳转到上一个错误
		|:cNfile|		 :cNf[ile]			 跳转到前一个文件的最后一个错误
		|:cabbrev|		 :ca[bbrev]			 类似于 ":abbreviate",但用于命令行模式
		|:cabclear|		 :cabc[lear]			 清除所有缩写,用于命令行模式
		|:caddbuffer|		 :caddb[uffer]			 通过缓冲区补充错误
		|:caddexpr|		 :cad[dexpr]			 通过表达式补充错误
		|:caddfile|		 :caddf[ile]			 加入错误信息到当前 quickfix 列表
		|:call|		 :cal[l]			 调用函数
		|:catch|		 :cat[ch]			 :try 命令的一部分
		|:cbuffer|		 :cb[uffer]			 分析错误信息并跳转到第一个
		|:cc|		 :cc			 跳转到特定的错误
		|:cclose|		 :ccl[ose]			 关闭 quickfix 窗口
		|:cd|		 :cd			 改变目录
		|:center|		 :ce[nter]			 排版行,使其居中对齐
		|:cexpr|		 :cex[pr]			 从表达式里读取错误并跳转到第一个
		|:cfile|		 :cf[ile]			 读入含有错误信息的文件,并跳转到第一个
		|:cfirst|		 :cfir[st]			 跳转到指定的错误上,缺省为第一个
		|:cgetbuffer|		 :cgetb[uffer]			 从缓冲区里得到错误
		|:cgetexpr|		 :cgete[xpr]			 从表达实里得到错误
		|:cgetfile|		 :cg[etfile]			 读入含有错误信息的文件
		|:changes|		 :changes			 显示修改的列表
		|:chdir|		 :chd[ir]			 改变当前目录
		|:checkpath|		 :che[ckpath]			 列出包含的头文件
		|:checktime|		 :checkt[ime]			 检查载入缓冲区的时间标签
		|:clist|		 :cl[ist]			 列出所有错误
		|:clast|		 :cla[st]			 跳转到指定的错误上,缺省为最后一个
		|:close|		 :clo[se]			 改变当前窗口
		|:cmap|		 :cm[ap]			 类似于 ":map",但用于命令行模式
		|:cmapclear|		 :cmapc[lear]			 清除所有映射,用于命令行模式
		|:cmenu|		 :cme[nu]			 为命令行模式增加菜单
		|:cnext|		 :cn[ext]			 跳转到下一个错误
		|:cnewer|		 :cnew[er]			 跳转到下一个较新的错误列表
		|:cnfile|		 :cnf[ile]			 跳转到下一个文件的第一个错误
		|:cnoremap|		 :cno[remap]			 类似于 ":noremap",但用于命令行模式
		|:cnoreabbrev|		 :cnorea[bbrev]			 类似于 ":noreabbrev",但用于命令行模式
		|:cnoremenu|		 :cnoreme[nu]			 类似于 ":noremenu",但用于命令行模式
		|:copy|		 :co[py]			 复制行
		|:colder|		 :col[der]			 跳转到上一个较老的错误列表
		|:colorscheme|		 :colo[rscheme]			 载入特定的色彩方案
		|:command|		 :com[mand]			 建立用户自定的命令
		|:comclear|		 :comc[lear]			 清除所有用户自定的命令
		|:compiler|		 :comp[iler]			 为特定编译器设定选项
		|:continue|		 :con[tinue]			 回到 :while 开始处
		|:confirm|		 :conf[irm]			 需要确认时,提示用户
		|:copen|		 :cope[n]			 打开 quickfix 窗口
		|:cprevious|		 :cp[revious]			 跳转到上一个错误
		|:cpfile|		 :cpf[ile]			 跳转到上一个文件的最后一个错误
		|:cquit|		 :cq[uit]			 退出 Vim,带错误码
		|:crewind|		 :cr[ewind]			 跳到指定的错误,缺省为第一个
		|:cscope|		 :cs[cope]			 执行 cscope 命令
		|:cstag|		 :cst[ag]			 使用 cscope 来跳转到标签上
		|:cunmap|		 :cu[nmap]			 类似于 ":unmap",但用于命令行模式
		|:cunabbrev|		 :cuna[bbrev]			 类似于 ":unabbrev",但用于命令行模式
		|:cunmenu|		 :cunme[nu]			 删除命令行的菜单
		|:cwindow|		 :cw[indow]			 打开或者关闭 quickfix 窗口
		|:delete|		 :d[elete]			 删除行
		|:delmarks|		 :delm[arks]			 删除位置标记
		|:debug|		 :deb[ug]			 在调试模式执行命令
		|:debuggreedy|		 :debugg[reedy]			 从正常的输入那里读取调试模式命令
		|:delcommand|		 :delc[ommand]			 删除用户自定的命令
		|:delfunction|		 :delf[unction]			 删除用户函数
		|:diffupdate|		 :dif[fupdate]			 更新 ’diff’ 缓冲区
		|:diffget|		 :diffg[et]			 删除当前缓冲区的所有差异
		|:diffoff|		 :diffo[ff]			 关闭 diff 模式
		|:diffpatch|		 :diffp[atch]			 应用补丁然后显示差异
		|:diffput|		 :diffpu[t]			 删除另外一个缓冲区的差异
		|:diffsplit|		 :diffs[plit]			 显示和另外一个文件的差异
		|:diffthis|		 :diffthis			 使得当前窗口成为 diff 窗口
		|:digraphs|		 :dig[raphs]			 显示或者输入二合字母
		|:display|		 :di[splay]			 显示寄存器
		|:dl|		 :dl			 |:delete| 的简写
		|:dl|		 :del[ete]l			 |:delete| 的简写
		|:djump|		 :dj[ump]			 跳转到 #define
		|:dlist|		 :dli[st]			 列出所有的 #define
		|:doautocmd|		 :do[autocmd]			 在当前缓冲区应用自动命令
		|:doautoall|		 :doautoa[ll]			 在所有载入的缓冲区上应用自动命令
		|:dp|		 :d[elete]p			 |:delete| 的简写
		|:drop|		 :dr[op]			 跳到编辑某文件的窗口,不成功则在当前窗口编辑之
		|:dsearch|		 :ds[earch]			 列出一个 #define
		|:dsplit|		 :dsp[lit]			 分割窗口并跳转到 #define
		|:edit|		 :e[dit]			 编辑文件
		|:earlier|		 :ea[rlier]			 回到旧的改变,撤销
		|:echo|		 :ec[ho]			 回显表达式结果
		|:echoerr|		 :echoe[rr]			 类似于 :echo,如同错误一样显示和使用历史
		|:echohl|		 :echoh[l]			 为 echo 等命令设置高亮
		|:echomsg|		 :echom[sg]			 等同于 :echo,在历史里放置消息
		|:echon|		 :echon			 等同于 :echo,但不留 <EOL>
		|:else|		 :el[se]			 :if 命令的一部分
		|:elseif|		 :elsei[f]			 :if 命令的一部分
		|:emenu|		 :em[enu]			 按名字执行菜单
		|:endif|		 :en[dif]			 结束最近的 :if
		|:endfor|		 :endfo[r]			 结束最近的 :for
		|:endfunction|		 :endf[unction]			 结束用户函数
		|:endtry|		 :endt[ry]			 结束最近的 :try
		|:endwhile|		 :endw[hile]			 结束最近的 :while
		|:enew|		 :ene[w]			 编辑新的无名缓冲区
		|:ex|		 :ex			 等同于 ":edit"
		|:execute|		 :exe[cute]			 执行表达式的结果产生的字符串
		|:exit|		 :exi[t]			 等同于 ":xit"
		|:exusage|		 :exu[sage]			 Ex 命令总览
		|:file|		 :f[ile]			 显示或者设置当前文件名
		|:files|		 :files			 列出缓冲区列表的所有文件
		|:filetype|		 :filet[ype]			 切换文件类型检测的打开/关闭
		|:find|		 :fin[d]			 在 ’path’ 里找寻文件并编辑之
		|:finally|		 :fina[lly]			 :try 命令的一部分
		|:finish|		 :fini[sh]			 退出 Vim 脚本的执行
		|:first|		 :fir[st]			 转到参数列表的第一个文件
		|:fixdel|		 :fix[del]			 设置 <Del> 的键码
		|:fold|		 :fo[ld]			 创建折叠
		|:foldclose|		 :foldc[lose]			 关闭折叠
		|:folddoopen|		 :foldd[oopen]			 对所有不在关闭折叠的行执行命令
		|:folddoclosed|		 :folddoc[losed]			 对所有在关闭折叠的行执行命令
		|:foldopen|		 :foldo[pen]			 打开折叠
		|:for|		 :for			 for 循环
		|:function|		 :fu[nction]			 定义用户函数
		|:global|		 :g[lobal]			 对匹配的行执行命令
		|:goto|		 :go[to]			 转到缓冲区某字节处
		|:grep|		 :gr[ep]			 执行 ’grepprg’ 并转到第一个匹配处
		|:grepadd|		 :grepa[dd]			 类似 :grep,但附加到当前列表后
		|:gui|		 :gu[i]			 启动 GUI
		|:gvim|		 :gv[im]			 启动 GUI
		|:hardcopy|		 :ha[rdcopy]			 发送文本到打印机
		|:help|		 :h[elp]			 打开帮助窗口
		|:helpfind|		 :helpf[ind]			 打开显示帮助窗口的对话框
		|:helpgrep|		 :helpg[rep]			 类似于 ":grep",但搜索帮助文件
		|:helptags|		 :helpt[ags]			 为一个目录产生帮助标签
		|:highlight|		 :hi[ghlight]			 指定高亮方法
		|:hide|		 :hid[e]			 为一个命令隐藏当前缓冲区
		|:history|		 :his[tory]			 显示历史列表
		|:insert|		 :i[nsert]			 插入文本
		|:iabbrev|		 :ia[bbrev]			 类似于 ":abbrev",但用于插入模式
		|:iabclear|		 :iabc[lear]			 类似于 ":abclear",但用于插入模式
		|:if|		 :if			 条件满足时执行命令
		|:ijump|		 :ij[ump]			 跳转到标识符的定义
		|:ilist|		 :il[ist]			 列出匹配标识符的行
		|:imap|		 :im[ap]			 类似于 ":map",但用于插入模式
		|:imapclear|		 :imapc[lear]			 类似于 ":map",但用于插入模式
		|:imenu|		 :ime[nu]			 为插入模式增加菜单
		|:inoremap|		 :ino[remap]			 类似于 ":noremap",但用于插入模式
		|:inoreabbrev|		 :inorea[bbrev]			 类似于 ":noreabbrev",但用于插入模式
		|:inoremenu|		 :inoreme[nu]			 类似于 ":noremenu",但用于插入模式
		|:intro|		 :int[ro]			 显示介绍文字
		|:isearch|		 :is[earch]			 列出匹配标识符的一行
		|:isplit|		 :isp[lit]			 分割窗口,并跳转到标识符的定义
		|:iunmap|		 :iu[nmap]			 类似于 ":unmap",但用于插入模式
		|:iunabbrev|		 :iuna[bbrev]			 类似于 ":unabbrev",但用于插入模式
		|:iunmenu|		 :iunme[nu]			 删除插入模式的菜单
		|:join|		 :j[oin]			 连接行
		|:jumps|		 :ju[mps]			 显示跳转表
		|:k|		 :k			 设置位置标记
		|:keepalt|		 :keepa[lt]			 跟随的命令保持轮换文件不变
		|:keepmarks|		 :kee[pmarks]			 跟随的命令保持位置标记不变
		|:keepjumps|		 :keepj[umps]			 跟随的命令保持跳转表和位置标记不变
		|:lNext|		 :lN[ext]			 转到位置列表的上一个位置
		|:lNfile|		 :lNf[ile]			 转到上个文件的最近一个位置
		|:list|		 :l[ist]			 显示行
		|:laddexpr|		 :lad[dexpr]			 通过表达式补充位置
		|:laddbuffer|		 :laddb[uffer]			 通过缓冲区补充位置
		|:laddfile|		 :laddf[ile]			 把位置加到当前位置列表里
		|:last|		 :la[st]			 转到参数列表的最后一个文件
		|:language|		 :lan[guage]			 设置语言 (locale)
		|:later|		 :lat[er]			 转到新的改变,重做
		|:lbuffer|		 :lb[uffer]			 分析位置并跳转到第一个位置
		|:lcd|		 :lc[d]			 改变本地的目录
		|:lchdir|		 :lch[dir]			 改变本地的目录
		|:lclose|		 :lcl[ose]			 关闭位置窗口
		|:lcscope|		 :lcs[cope]			 类似于 ":cscope",但使用位置列表
		|:left|		 :le[ft]			 左对齐行
		|:leftabove|		 :lefta[bove]			 使得分割的窗口出现在左侧或者上方
		|:let|		 :let			 给变量或选项赋值
		|:lexpr|		 :lex[pr]			 从表达式里读取位置并跳转到第一个
		|:lfile|		 :lf[ile]			 从文件里读取位置并跳转到第一个
		|:lfirst|		 :lfir[st]			 转到指定的位置上,缺省第一个
		|:lgetbuffer|		 :lgetb[uffer]			 从缓冲区里读取位置
		|:lgetexpr|		 :lgete[xpr]			 从表达式里读取位置
		|:lgetfile|		 :lg[etfile]			 从文件里读取位置
		|:lgrep|		 :lgr[ep]			 运行 ’grepprg’ 并跳转到第一个匹配
		|:lgrepadd|		 :lgrepa[dd]			 类似于 :grep,但附加到当前列表上
		|:lhelpgrep|		 :lh[elpgrep]			 类似于 ":helpgrep",但使用位置列表
		|:ll|		 :ll			 转到指定位置
		|:llast|		 :lla[st]			 转到指定位置,缺省最后一个
		|:llist|		 :lli[st]			 列出所有的位置
		|:lmake|		 :lmak[e]			 执行外部命令 ’makeprg’ 并分析错误信息
		|:lmap|		 :lm[ap]			 类似于 ":map!",但包括 Lang-Arg 模式
		|:lmapclear|		 :lmapc[lear]			 类似于 ":mapclear!",但包括 Lang-Arg 模式
		|:lnext|		 :lne[xt]			 跳到下一个位置
		|:lnewer|		 :lnew[er]			 跳到较新的位置列表
		|:lnfile|		 :lnf[ile]			 跳到下一个文件的第一个位置
		|:lnoremap|		 :ln[oremap]			 类似于 ":noremap!",但包括 Lang-Arg 模式
		|:loadkeymap|		 :loadk[eymap]			 载入后面的键盘映射表,直到 EOF 为止
		|:loadview|		 :lo[adview]			 从文件里为当前窗口载入视图
		|:lockmarks|		 :loc[kmarks]			 跟随的命令保持位置标记不变
		|:lockvar|		 :lockv[ar]			 给变量加锁
		|:lolder|		 :lol[der]			 转到较旧的位置列表
		|:lopen|			 :lope[n]			 打开位置窗口
		|:lprevious|			 :lp[revious]			 转到前一个位置
		|:lpfile|			 :lpf[ile]			 转到上一个文件的最近的位置
		|:lrewind|			 :lr[ewind]			 转到指定的位置,缺省第一个
		|:ls|			 :ls			 列出所有的缓冲区
		|:ltag|			 :lt[ag]			 跳转到标签,并把匹配的标签加到位置列表上
		|:lunmap|			 :lu[nmap]			 类似于 ":unmap!",但包括 Lang-Arg 模式
		|:lua|			 :lua			 执行 |Lua| 命令
		|:luado|			 :luad[o]			 对每行都执行 Lua 命令
		|:luafile|			 :luaf[ile]			 执行 |Lua| 脚本文件
		|:lvimgrep|			 :lv[imgrep]			 在若干文件里搜索模式
		|:lvimgrepadd| :lvimgrepa[dd] 类似于 :vimgrep,但附加到当前列表
		|:lwindow|			 :lw[indow]			 打开或关闭位置窗口
		|:move|			 :m[ove]			 移动行
		|:mark|			 :ma[rk]			 设置位置标记
		|:make|			 :mak[e]			 执行外部命令 ’makeprg’ 并分析其错误信息
		|:map|			 :map			 显示或者输入映射
		|:mapclear|			 :mapc[lear]			 清除所有普通和可视模式的映射
		|:marks|			 :marks			 列出所有的位置标记
		|:match|			 :mat[ch]			 定义要高亮显示的匹配的模式
		|:menu|			 :me[nu]			 输入新的菜单项
		|:menutranslate| :menut[ranslate] 增加菜单翻译项目
		|:messages|			 :mes[sages]			 显示以前显示的消息
		|:mkexrc|			 :mk[exrc]			 写入当前映射和设置到文件
		|:mksession|			 :mks[ession]			 写入会话信息到文件
		|:mkspell|			 :mksp[ell]			 生成 .spl 拼写文件
		|:mkvimrc|			 :mkv[imrc]			 写入当前映射和设置到文件
		|:mkview|			 :mkvie[w]			 写入当前窗口的视图到文件
		|:mode|			 :mod[e]			 显示或者改变屏幕模式
		|:mzscheme|			 :mz[scheme]			 执行 MzScheme 命令
		|:mzfile|			 :mzf[ile]			 执行 MzScheme 脚本文件
		|:nbclose|			 :nbc[lose]			 关闭当前 Netbeans 会话
		|:nbkey|			 :nb[key]			 传递一个键给 Netbeans
		|:nbstart|			 :nbs[art]			 打开一个新的 Netbeans 会话
		|:next|			 :n[ext]			 跳转到参数列表的下一个文件
		|:new|			 :new			 创建一个新的空白窗口
		|:nmap|			 :nm[ap]			 类似于 ":map",但使用普通模式
		|:nmapclear|			 :nmapc[lear]			 清除普通模式的所有映射
		|:nmenu|			 :nme[nu]			 为普通模式增加菜单
		|:nnoremap|			 :nn[oremap]			 类似于 ":noremap",但使用普通模式
		|:nnoremenu|			 :nnoreme[nu]			 类似于 ":noremenu",但使用普通模式
		|:noautocmd|			 :noa[utocmd]			 跟随的命令不激活自动命令
		|:noremap|			 :no[remap]			 输入不会被重新映射的映射
		|:nohlsearch|			 :noh[lsearch]			 暂停 ’hlsearch’ 高亮
		|:noreabbrev|			 :norea[bbrev]			 输入不会被重新映射的缩写
		|:noremenu|			 :noreme[nu]			 输入不会被重新映射的菜单
		|:normal|			 :norm[al]			 执行普通模式的命令
		|:number|			 :nu[mber]			 显示文本行时给出行号
		|:nunmap|			 :nun[map]			 类似于 ":unmap",但使用普通模式
		|:nunmenu|			 :nunme[nu]			 删除普通模式的菜单
		|:oldfiles|			 :ol[dfiles]			 列出 viminfo 文件中包含位置标记的文件
		|:open|			 :o[pen]			 启动打开模式 (没有实现)
		|:omap|			 :om[ap]			 类似于 ":map",但使用操作符等待模式
		|:omapclear|			 :omapc[lear]			 删除操作符等待模式的所有映射
		|:omenu|		 :ome[nu]			 为操作符等待模式增加菜单
		|:only|		 :on[ly]			 关闭当前窗口,除了当前的窗口以外
		|:onoremap|		 :ono[remap]			 类似于 ":noremap",但使用操作符等待模式
		|:onoremenu|		 :onoreme[nu]			 类似于 ":noremenu",但使用操作符等待模式
		|:options|		 :opt[ions]			 打开选项窗口
		|:ounmap|		 :ou[nmap]			 类似于 ":unmap",但使用操作符等待模式
		|:ounmenu|		 :ounme[nu]			 删除操作符等待模式的菜单
		|:ownsyntax|		 :ow[nsyntax]			 为本窗口设置新的局部语法高亮
		|:print|		 :p[rint]			 显示行
		|:profdel|		 :profd[el]			 停止剖视 (profile) 函数或脚本
		|:profile|		 :prof[ile]			 剖视 (profile) 函数或脚本
		|:promptfind|		 :pro[mptfind]			 打开 GUI 对话框进行搜索
		|:promptrepl|		 :promptr[epl]			 打开 GUI 对话框进行搜索/替代
		|:pclose|		 :pc[lose]			 关闭预览窗口
		|:pedit|		 :ped[it]			 在预览窗口编辑文件
		|:perl|		 :pe[rl]			 执行 Perl 命令
		|:perldo|		 :perld[o]			 对每行都执行 Perl 命令
		|:pop|		 :po[p]			 跳转到标签栈较旧的项目上
		|:popup|		 :popu[p]			 根据名字弹出菜单
		|:ppop|		 :pp[op]			 在预览窗口 ":pop"
		|:preserve|		 :pre[serve]			 写入所有文本到交换文件
		|:previous|		 :prev[ious]			 跳转到参数列表里的上一个文件
		|:psearch|		 :ps[earch]			 类似于 ":ijump",但在预览窗口显示匹配
		|:ptag|		 :pt[ag]			 在预览窗口显示标签
		|:ptNext|		 :ptN[ext]			 在预览窗口 |:tNext|
		|:ptfirst|		 :ptf[irst]			 在预览窗口 |:trewind|
		|:ptjump|		 :ptj[ump]			 在预览窗口 |:tjump| 和显示标签
		|:ptlast|		 :ptl[ast]			 在预览窗口 |:tlast|
		|:ptnext|		 :ptn[ext]			 在预览窗口 |:tnext|
		|:ptprevious|		 :ptp[revious]			 在预览窗口 |:tprevious|
		|:ptrewind|		 :ptr[ewind]			 在预览窗口 |:trewind|
		|:ptselect|		 :pts[elect]			 在预览窗口 |:tselect| 和显示标签
		|:put|		 :pu[t]			 插入寄存器的内容到文本
		|:pwd|		 :pw[d]			 显示当前目录
		|:py3|		 :py3			 执行 Python 3 命令
		|:python3|		 :python3			 同 :py3
		|:py3do|		 :py3d[o]			 对每行都执行 Python 3 命令
		|:py3file|		 :py3f[ile]			 执行 Python 3 脚本文件
		|:python|		 :py[thon]			 执行 Python 命令
		|:pydo|		 :pyd[o]			 对每行都执行 Python 命令
		|:pyfile|		 :pyf[ile]			 执行 Python 脚本文件
		|:quit|		 :q[uit]			 退出当前窗口 (如果只有一窗口,则退出 Vim)
		|:quitall|		 :quita[ll]			 退出 Vim
		|:qall|		 :qa[ll]			 退出 Vim
		|:read|		 :r[ead]			 读入文件到文本
		|:recover|		 :rec[over]			 从交换文件里恢复文件
		|:redo|		 :red[o]			 重做一次撤销的改变
		|:redir|		 :redi[r]			 重定向消息到文件或者寄存器
		|:redraw|		 :redr[aw]			 强迫显示的重画
		|:redrawstatus|		 :redraws[tatus]			 强迫状态行的重画
		|:registers|		 :reg[isters]			 显示寄存器的内容
		|:resize|		 :res[ize]			 改变当前窗口的高度
		|:retab|		 :ret[ab]			 改变制表大小
		|:return|		 :retu[rn]			 从用户函数返回
		|:rewind|			 :rew[ind]			 转到参数列表的第一个文件
		|:right|			 :ri[ght]			 右对齐文本
		|:rightbelow|			 :rightb[elow]			 使得分割窗口出现在右侧或者下方
		|:ruby|			 :rub[y]			 执行 Ruby 命令
		|:rubydo|			 :rubyd[o]			 对每行执行 Ruby 命令
		|:rubyfile|			 :rubyf[ile]			 执行 Ruby 脚本文件
		|:rundo|			 :rund[o]			 从文件里读入撤销信息
		|:runtime|			 :ru[ntime]			 执行 ’runtimepath’ 里的 vim 脚本
		|:rviminfo|			 :rv[iminfo]			 读取 viminfo 文件
		|:substitute|			 :s[ubstitute]			 查找和替代文本
		|:sNext|			 :sN[ext]			 分割窗口并转到参数列表的前一个文件
		|:sandbox|			 :san[dbox]			 在沙盘里执行命令
		|:sargument|			 :sa[rgument]			 分割窗口并转到参数列表的某一个文件
		|:sall|			 :sal[l]			 为参数列表的每个文件打开窗口
		|:saveas|			 :sav[eas]			 用别的名字保存文件。
		|:sbuffer|			 :sb[uffer]			 分割窗口并转到缓冲区列表的某一个文件
		|:sbNext|			 :sbN[ext]			 分割窗口并转到缓冲区列表的前一个文件
		|:sball|			 :sba[ll]			 为缓冲区列表的每个文件打开窗口
		|:sbfirst|			 :sbf[irst]			 分割窗口并转到缓冲区列表的第一个文件
		|:sblast|			 :sbl[ast]			 分割窗口并转到缓冲区列表的最后一个文件
		|:sbmodified|			 :sbm[odified]			 分割窗口并转到缓冲区列表的修改过的文件
		|:sbnext|			 :sbn[ext]			 分割窗口并转到缓冲区列表的后一个文件
		|:sbprevious|			 :sbp[revious]			 分割窗口并转到缓冲区列表的前一个文件
		|:sbrewind|			 :sbr[ewind]			 分割窗口并转到缓冲区列表的第一个文件
		|:scriptnames| :scrip[tnames] 列出所有执行过的 Vim 脚本的名字			 |:scriptencoding| :scripte[ncoding]			 执行过的 Vim 脚本使用的编码
		|:scscope|			 :scs[cope]			 分割窗口并执行 cscope 命令
		|:set|			 :se[t]			 显示或设置选项
		|:setfiletype| :setf[iletype] 设置 ’filetype’,除非已经设置过
		|:setglobal|			 :setg[lobal]			 显示或者设置全局选项值
		|:setlocal|			 :setl[ocal]			 显示或者设置本地选项值
		|:sfind|			 :sf[ind]			 分割当前窗口并编辑 ’path’ 的文件
		|:sfirst|			 :sfir[st]			 分割窗口并转到参数列表的第一个文件
		|:shell|			 :sh[ell]			 退到外壳程序
		|:simalt|			 :sim[alt]			 Win32 GUI: 模拟 Windows ALT 键
		|:sign|			 :sig[n]			 操作标号
		|:silent|			 :sil[ent]			 安静地运行命令
		|:sleep|			 :sl[eep]			 几秒内不作任何事
		|:slast|			 :sla[st]			 分割窗口并转到参数列表的最后一个文件
		|:smagic|			 :sm[agic]			 带 ’magic’ 的 :substitute
		|:smap|			 :smap			 类似于 ":map",但用于选择模式
		|:smapclear|			 :smapc[lear]			 删除选择模式所有的映射
		|:smenu|			 :sme[nu]			 增加选择模式菜单
		|:snext|			 :sn[ext]			 分割窗口并转到参数列表的下一个文件
		|:sniff|			 :sni[ff]			 发送请求到 sniff
		|:snomagic|			 :sno[magic]			 带 ’nomagic’ 的 :substitute
		|:snoremap|			 :snor[emap]			 类似于 ":noremap",但用于选择模式
		|:snoremenu|			 :snoreme[nu]			 类似于 ":noremenu",但用于选择模式
		|:sort|			 :sor[t]			 给行排序
		|:source|			 :so[urce]			 从文件里读取 Vim 或 Ex 命令
		|:spelldump|			 :spelld[ump]			 分割窗口并用正确的单词填充
		|:spellgood|			 :spe[llgood]			 增加拼写的好词
		|:spellinfo|			 :spelli[nfo]			 显示载入的拼写文件的信息
		|:spellrepall|		 :spellr[epall]		 像上次 |z=| 那样,但替换所有的坏词
		|:spellundo|			 :spellu[ndo]			 删除好词或坏词
		|:spellwrong|			 :spellw[rong]			 增加拼写错误
		|:split|			 :sp[lit]			 分割当前窗口
		|:sprevious|			 :spr[evious]			 分割窗口并转到参数列表的前一个文件
		|:srewind|			 :sre[wind]			 分割窗口并转到参数列表的第一个文件
		|:stop|			 :st[op]			 暂停编辑器并退回外壳
		|:stag|			 :sta[g]			 分割窗口并跳转到标签上
		|:startgreplace| :startg[replace] 开始虚拟替换模式			 |:startreplace| :startr[eplace] 开始替换模式			 |:startinsert| :star[tinsert] 开始插入模式
		|:stopinsert|			 :stopi[nsert]			 退出插入模式
		|:stjump|			 :stj[ump]			 执行 ":tjump" 并分割窗口
		|:stselect|			 :sts[elect]			 执行 ":tselect" 并分割窗口
		|:sunhide|			 :sun[hide]			 等同于 ":unhide"
		|:sunmap|			 :sunm[ap]			 类似于 ":unmap",但用于选择模式
		|:sunmenu|			 :sunme[nu]			 删除选择模式的菜单
		|:suspend|			 :sus[pend]			 等同于 ":stop"
		|:sview|			 :sv[iew]			 分割窗口并以只读模式编辑文件
		|:swapname|			 :sw[apname]			 显示当前交换文件的名字
		|:syntax|			 :sy[ntax]			 语法高亮
		|:syntime|			 :synti[me]			 测量语法高亮速度
		|:syncbind|			 :sync[bind]			 同步滚动绑定
		|:t|			 :t			 等同于 ":copy"
		|:tNext|			 :tN[ext]			 跳转到上一个匹配的标签
		|:tabNext|			 :tabN[ext]			 跳到上一个标签页
		|:tabclose|			 :tabc[lose]			 关闭当前标签页
		|:tabdo|			 :tabdo			 为每个标签页执行命令
		|:tabedit|			 :tabe[dit]			 在新标签页里编辑文件
		|:tabfind|			 :tabf[ind]			 寻找 ’path’ 里的文件,在新标签页里编辑之
		|:tabfirst|			 :tabfir[st]			 转到第一个标签页
		|:tablast|			 :tabl[ast]			 转到最后一个标签页
		|:tabmove|			 :tabm[ove]			 把标签页移到别的位置
		|:tabnew|			 :tabnew			 在新标签页里编辑文件
		|:tabnext|			 :tabn[ext]			 转到下一个标签页
		|:tabonly|			 :tabo[nly]			 关闭所有除了当前标签页以外的所有标签页
		|:tabprevious| :tabp[revious] 转到前一个标签页
		|:tabrewind|			 :tabr[ewind]			 转到第一个标签页
		|:tabs|			 :tabs			 列出标签页以及里面包含的内容
		|:tab|			 :tab			 打开新窗口时建立新的标签页
		|:tag|			 :ta[g]			 跳转到标签上
		|:tags|			 :tags			 显示标签栈的内容
		|:tcl|			 :tc[l]			 执行 Tcl 命令
		|:tcldo|			 :tcld[o]			 为每行执行 Tcl 命令
		|:tclfile|			 :tclf[ile]			 执行 Tcl 脚本文件
		|:tearoff|			 :te[aroff]			 撕下一个菜单
		|:tfirst|			 :tf[irst]			 转到第一个匹配的标签
		|:throw|			 :th[row]			 抛出例外
		|:tjump|			 :tj[ump]			 类似于 ":tselect",只有一个匹配时直接跳转之
		|:tlast|			 :tl[ast]			 跳转到最后一个匹配的标签
		|:tmenu|			 :tm[enu]			 定义菜单的工具提示
		|:tnext|			 :tn[ext]			 跳转到下一个匹配的标签
		|:topleft|			 :to[pleft]			 使得分割的窗口出现在顶部或者最左端
		|:tprevious|			 :tp[revious]			 跳转到上一个匹配的标签
		|:trewind|			 :tr[ewind]			 跳转到第一个匹配的标签
		|:try|		 :try			 执行命令,错误或者例外时终止
		|:tselect|		 :ts[elect]			 列出匹配的标签并从中选择一个
		|:tunmenu|		 :tu[nmenu]			 删除菜单的工具提示
		|:undo|		 :u[ndo]			 撤销最近的改变
		|:undojoin|		 :undoj[oin]			 将下一个改变和上一个撤销块合并
		|:undolist|		 :undol[ist]			 列出撤销树的叶结点
		|:unabbreviate|		 :una[bbreviate]			 删除缩写
		|:unhide|		 :unh[ide]			 为缓冲区列表里每个载入的文件打开窗口
		|:unlet|		 :unl[et]			 删除变量
		|:unlockvar|		 :unlo[ckvar]			 给变量解锁
		|:unmap|		 :unm[ap]			 删除映射
		|:unmenu|		 :unme[nu]			 删除菜单
		|:unsilent|		 :uns[ilent]			 非安静模式执行命令
		|:update|		 :up[date]			 如果有修改,写回缓冲区
		|:vglobal|		 :v[global]			 对不匹配的行,执行命令
		|:version|		 :ve[rsion]			 显示版本号和其它信息
		|:verbose|		 :verb[ose]			 执行命令,过程中设置 ’verbose’
		|:vertical|		 :vert[ical]			 使得跟随的命令垂直分割
		|:vimgrep|		 :vim[grep]			 在若干文件里查找模式
		|:vimgrepadd|		 :vimgrepa[dd]			 类似于 :vimgrep,但附加到当前列表
		|:visual|		 :vi[sual]			 等同于 ":edit",但关掉 "Ex" 模式
		|:viusage|		 :viu[sage]			 普通模式命令的总览
		|:view|		 :vie[w]			 以只读方式编辑文件
		|:vmap|		 :vm[ap]			 类似于 ":map",但使用可视+选择模式
		|:vmapclear|		 :vmapc[lear]			 删除可视+选择模式所有的映射
		|:vmenu|		 :vme[nu]			 为可视+选择模式增加菜单
		|:vnew|		 :vne[w]			 建立新的空白窗口,垂直分割
		|:vnoremap|		 :vn[oremap]			 类似于 ":noremap",但使用可视+选择模式
		|:vnoremenu|		 :vnoreme[nu]			 类似于 ":noremenu",但使用可视+选择模式
		|:vsplit|		 :vs[plit]			 垂直分割当前窗口
		|:vunmap|		 :vu[nmap]			 类似于 ":unmap",但使用可视+选择模式
		|:vunmenu|		 :vunme[nu]			 删除可视+选择模式的菜单
		|:windo|		 :windo			 为每个窗口执行命令
		|:write|		 :w[rite]			 写回文件
		|:wNext|		 :wN[ext]			 写回文件,然后跳转到参数列表的前一个文件
		|:wall|		 :wa[ll]			 写回所有 (改变的) 缓冲区
		|:while|		 :wh[ile]			 只要条件满足,执行循环体
		|:winsize|		 :wi[nsize]			 取得或者设置窗口大小 (已废弃)
		|:wincmd|		 :winc[md]			 执行窗口 (CTRL-W) 命令
		|:winpos|		 :winp[os]			 取得或者设置窗口位置
		|:wnext|		 :wn[ext]			 写回文件,然后跳转到参数列表的下一个文件
		|:wprevious|		 :wp[revious]			 写回文件,然后跳转到参数列表的前一个文件
		|:wq|		 :wq			 写回文件,然后退出窗口或者 Vim
		|:wqall|		 :wqa[ll]			 写回所有 (改变的) 缓冲区然后退出 Vim
		|:wsverb|		 :ws[verb]			 把动词通过 IPC 发送给 workshop
		|:wundo|		 :wu[ndo]			 把撤销信息写入文件
		|:wviminfo|		 :wv[iminfo]			 写入 viminfo 文件
		|:xit|		 :x[it]			 如果缓冲区被改动,写入之。然后退出窗口或者 Vim
		|:xall|		 :xa[ll]			 等同于 ":wqall"
		|:xmapclear|		 :xmapc[lear]			 删除可视模式的所有映射
		|:xmap|		 :xm[ap]			 类似于 ":map",但使用可视模式
		|:xmenu|		 :xme[nu]			 增加可视模式的菜单
		|:xnoremap|		 :xn[oremap]			 类似于 ":noremap",但使用可视模式
		|:xnoremenu|		 :xnoreme[nu]			 类似于 ":noremenu",但使用可视模式
		|:xunmap|		 :xu[nmap]			 类似于 ":unmap",但使用可视模式
		|:xunmenu|		 :xunme[nu]			 删除可视模式的菜单
		|:yank|		 :y[ank]			 抽出行到寄存器
		|:z|		 :z			 显示一些行
		|:~|		 :~			 重复上次 ":substitute"


Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-05-01T22:01:56+08:00

====== Vim ======
Created 星期日 01 五月 2016

==== 0.其他 ====
man :
CTRL-] 跳转到当前光标所在单词对应的主题
CTRL-O 回到前一个位置

	全局：/etc/vimrc
	个人：~/.vimrc (默认不存在，需要自己创建)
(1) 行号：
	显示：set number，简写为：set nu
	取消显示：set nonumber，简写为：set nonu
(2) 括号匹配：
	匹配：set showmatch，简写为：set sm
	取消匹配：set nosm
(3) 自动缩进：
	开启：set ai
	禁用：set noai
(4) 高亮搜索
	开启：set hlsearch
	禁用：set nohlsearch
(5) 语法高亮
	开启：syntax on
	禁用：syntax off
(6) 忽略字符大小写
	启用：set ic
	禁用：set noic
:set ignorecase
:set noignorecase
:set ruler　在Vim窗口的右下角显示当前光标位置
:set hlsearch 高亮显示所有符合的匹配
:set nohlsearch
	[[:nohlsearch临时去掉当前的高亮显示]]
:set incsearch　键入目标字符串的过程中Vim就同时开始了搜索工作
[[:set]] wrapscan 搜索在达到文件的头尾时都会绕向另一个方向继续进行
:set nowrapscan


==== 1.插件 ====

=== 1.Tagbar ===
f5 Tagbar
zc zo 折叠
c-h/j/k/l 窗口转换
c-ww窗口转换

=== 2. x ===

==== 2.命令 ====
xp：交换光标所在处的字符及其后面字符的位置；
nx ：删除n个字符
cc：删除并输入新内容
ncc：一次删除n行
nu：撤销指定次数的操作
c-r:撤销此前的撤销
?PATTERN：从当前光标所在处向文件首部查找
:wall 保存所有
:qall 退出所有

撤销：
u在当前分支上前溯
g-/+ 在两个分支上前溯
c-r 在当前分支返回到最新修改处
[[:undo]] 或:undo n 撤销一次或n次
（撤销不被编号，只有修改才被编号）
[[:undolist]] 显示撤销树的分支
[[:earlier]] 10s/m/h 回到10秒／分／时

３fy Fy ; , ty Ty  找到右面第三个y　;左面;重复;相反重复;跳到右面y前一个字符处；左面；
c-g 在底部状态栏显示总行数以及当前百分比

**需要加/转义的字符:**
**.*[]^%/?~$\**
(#"',-=_+()&@!<>{}不用哦(?)）

 * = [[/\<xxx\]]> 向后搜索光标处单词xxx
 # = ?\<xxx\> 同上，向前
g* = [[/xxx]]
g# =?xxx 

D 删除自当前光标至行尾的内容("d$"的快捷命令)
dw 删除自当前光标至下一个word的开头
db 删除自当前光标至前一个word的开始
diw 删除当前光标所在的word(不包括空白字符)
daw 删除当前光标所在的word(包括空白字符)

"*yy vi专有粘贴板
"+yy　系统公用粘贴板

强制指定文件格式
	:edit ++ff=unix file.txt　
		"++"字符串告诉Vim后面紧接着的是一个选项名,对该选项的设置
		将覆盖它的默认值。"++ff"代表的选项是'fileformat'.
		你也可以指定
		为"++ff=mac"或"++ff=dos"。
		（不 过 并 不 是 每 个 选 项 都 有 这 种 用 法 , 目 前 来 说 只
		有"++ff"和"++enc"可 以 这 样 用 。 当 然 也 可 以 用 这 两 个 选 项 的 全
		称"++fileformat"和"++encoding"。）
:%!xxd　　用"xxd"程序来做转换，以１６进制查看２进制文件(Vim将之视为普通文本。改变
		其十六进制不会引起右边对应字符的改变,反之也一样)
:%!xxd -r 编辑完成后再做一次逆向转换
gv 再次选择同一文本对象
c-a c-x 对选中数字加１或减１
	默认Vim将"007"视为一个八进制的数（:set nrformats-=octal　不让此类数字被看作
	是8进制的）
:argdo　对所有的文件执行操作，以另一个命令为参数。该命令将对所有待编辑的文件都
	执行一次。
	:argdo %s/\<x_cnt\>/x_counter/ge | update　(　"%s"替换操作将施于所有行上。替换操作的标志"g"使得每行中的全部"x cnt"都被替换。标志"e"则用 于 避 免 某 些 文 件 中 一 个"x cnt"都 找 不 到 时 的 错 误 消 息 。 否 则 的
	话":argdo"命令遇到这些错误就会终止整个操作。"update"命令会在文件有改变时进行保存。如果没有一个"x cnt"被替换为"x counter"那就不进行任何操作。)
:windo　对 所 有 窗 口 都 执 行 同 样 的 操作。
:bufdo　对所有的缓冲区执行操作

如果你只想对搜索模式的一部分应用大小写不敏感的策略,可以在它
前面加上一个"\c"。使用"\C"会使大小写敏感。而且这两个前辍的优先级
高 于'ignorecase'和'smartcase'选 项 的 设 定 , 使 用"\c"或"\C"时Vim不
会考虑这两个选项的值是什么。

:set nowrapscan 关闭越过文件头尾的循环搜索
[[/default/2]] 搜索模式"default",找到后将光标停留在目标行向下的第2行(偏移可以是正的也可以是负的,-2)
	[[/const/e　把光标置于目标字符串的最后一个字符]]
	/const/e+1　将光标置于目标字符串的结尾处的下一个字符
	[[/const/e-1]]
	[[/const/b+2]] 标字符串的开头右偏移2字符
 * \+ \= \{n,m} \{-n,m}(懒惰模式) \{-}(懒惰模式)
[[/forever\&...]] 将 只 会 匹 配"forever"中 的"for"(&后的...)。 但 不 会 匹 配 到"fortuin"中的"for"
[[/forever\&../b+3则光标将停留在字母for后的第三个字符e上]]
	特殊项 		匹配什么 		等价的正则表达式
	\d 数字 [0-9] 
	\D 非数字 [^0-9] 
	\x 十六进制数 [0-9a-fA-F] 
	\X 非十六进制数 [^0-9a-fA-F] 
	\s 空白字符 [ ] (<Tab> 和<Space>)
	\S 非空白字符 [^ ] (除 <Tab> 和 <Space>之外)
	\l 小写字母 [a-z] 
	\L 非小写字母 [^a-z] 
	\u 大写字母 [A-Z] 
	\U 非大写字母 [^A-Z]
	\a 字母字符 [a-zA-Z]   [[/\a]] = /[a-zA-Z]
	\e <Esc>
	\t <Tab>
	\r <CR>
	\b <BS>
	\i 标识符字符 'isident'
	\I 同于\i,但排除了数字 
	\k 关键字字符  'iskeyword'
	\K 同\k,但排除数字 
	\p 可打印字符 'isprint'
	\P 同\p,但排除数字 
	\f 文件名字符 'isfname' (实际上Unix系统的文件名可以是任何除'0'和'/'之外的字
	符,前者用于标记一个字符串的结束,后者用来分隔一个路径中不同的
	部分)
	\F 同\f,但排除数字 
	\_s 匹配空格或断行
		\s 匹配空格
	\_s\+ 多个的空白(空格或断行)字符
	\n 匹配断行
		其 它 的 项 都 可 以 通 过 前 辍 以"\_"来 同 时 包 括 断 行:
			"\_."可以匹配包括断行在内的任何字符
			"\_.*"匹配到行尾的所有东西
			"\_[]",它同样可以让一个字符类集额外地包含一个断行 ＝\[\n]
			"\_a"匹配一个字母字符或一个断行

